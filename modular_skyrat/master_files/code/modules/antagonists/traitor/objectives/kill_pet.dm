////
//	This is a modular hook on the kill_pet.dm, the `possible_heads` variable needs to be upkept according to the upstream file, or they will not occur.
/datum/traitor_objective/kill_pet
	possible_heads = list(
		JOB_HEAD_OF_PERSONNEL = list(
			/mob/living/simple_animal/pet/dog/corgi/ian,
			/mob/living/simple_animal/pet/dog/corgi/puppy/ian
		),
		JOB_CAPTAIN = /mob/living/simple_animal/pet/fox/renault,
		JOB_CHIEF_MEDICAL_OFFICER = /mob/living/simple_animal/pet/cat/runtime,
		JOB_CHIEF_ENGINEER = /mob/living/simple_animal/parrot/poly,
		// Non-heads like the warden, these are automatically medium-risk at minimum
		// They are also the only two modular additions so far
		JOB_ROBOTICIST = /mob/living/simple_animal/pet/dog/corgi/borgi,
		JOB_STATION_ENGINEER = /mob/living/simple_animal/pet/poppy,
	)

	// This variable is for the emag E-N objective. The obj details are below the next block
	var/obj/item/card/emag/oneshot/oneshot_emag


////
//	Objective overwrites
/datum/traitor_objective/kill_pet/generate_objective(datum/mind/generating_for, list/possible_duplicates)
	. = ..()
	// Dust Poppy the safety inspector
	if(istype(target_pet, /mob/living/simple_animal/pet/poppy))
		name = "Dust the engineering department's esteemed safety inspector and beloved pet, Poppy"
		description = "A couple of troublemakers in the engineering department have spilled the milk, make them and their colleagues pay for the consequences by throwing Poppy the safety inspector into the supermatter engine "
		// Cleaning up the original success_signals which are `list(COMSIG_PARENT_QDELETING, COMSIG_LIVING_DEATH)`
		for(var/datum/component/traitor_objective_register/old_objective as anything in GetComponents(/datum/component/traitor_objective_register))
			if(old_objective.target == target_pet)
				qdel(old_objective)
		// Adding our own signal component, targeting `target_pet`
		AddComponent(/datum/component/traitor_objective_register, target_pet, \
			succeed_signals = list(COMSIG_PARENT_QDELETING)) // Until dusting gets its own component, this has to make do

	// Emag E-N so it overloads
	if(istype(target_pet, /mob/living/simple_animal/pet/dog/corgi/borgi))
		name = "Emag the roboticist's most-prized borgi, E-N"
		description = "We received an untracable contract from someone addressed 'ianfan2489@solgov.nt', they want the robotic clone of Ian dead- and it has to be dramatic. We will supply you with a cryptographic sequencer from our basic loadout options to Shortcircuit E-N's safety, it will give you a single attempt to use it. Oh, and remember to run like hell when you do... "

		for(var/datum/component/traitor_objective_register/old_objective as anything in GetComponents(/datum/component/traitor_objective_register))
			if(old_objective.target == target_pet)
				qdel(old_objective)

		AddComponent(/datum/component/traitor_objective_register, target_pet, \
			succeed_signals = list(COMSIG_ATOM_EMAG_ACT))

////
//	Objective item (for emagging E-N)
/obj/item/card/emag/oneshot
	name = "cryptographic sequencer"
	special_desc_requirement = EXAMINE_CHECK_JOB
	special_desc_jobs = list(JOB_DETECTIVE, JOB_HEAD_OF_SECURITY)
	special_desc = "Upon inspection you can instantly tell this is a real cryptographic sequencer commonly traded in bulk for cheap at countless blackmarkets. They are known for their unreliability and breaking after just one use from their shoddy construction."
	var/charges = 1
	var/caller //Who summoned this?

/obj/item/card/emag/oneshot/examine(mob/user)
	. = ..()
	if(user == caller)
		. += span_notice("It looks cheapo, they did say it gives just one shot...")
	else
		. += span_notice("It looks flimsy and identical to the \"DonkCo\" toy.")

/obj/item/card/emag/oneshot/can_emag(atom/target, mob/user)
	if(charges <= 0)
		to_chat(user, span_warning("[src] is completely unresponsive."))
		return FALSE
	use_charge(user)
	return TRUE

/obj/item/card/emag/oneshot/proc/use_charge(mob/user)
	to_chat(user, span_warning("[src] beeps softly as its charge runs out."))
	charges --


////
//	Handle the UI button, this is currently just generated by a modular objective
/datum/traitor_objective/kill_pet/generate_ui_buttons(mob/user)
	var/list/buttons = list()
	if(istype(target_pet, /mob/living/simple_animal/pet/dog/corgi/borgi)) // Target has to be E-N
		if(!oneshot_emag)
			buttons += add_ui_button("", "Pressing this will materialize a single-use cryptographic sequencer in your hand, which you can use to shortcircuit E-N.", "bolt", "summon_emag")
	return buttons

/datum/traitor_objective/kill_pet/ui_perform_action(mob/living/user, action)
	. = ..()
	switch(action)
		if("summon_emag")
			if(oneshot_emag)
				return
			oneshot_emag = new(user.drop_location())
			oneshot_emag.caller = user
			user.put_in_hands(oneshot_emag)
			oneshot_emag.balloon_alert(user, "the card materializes in your hand")
			// No penalty for losing this objective item, it is up to the traitor if this is the emag they use or another
